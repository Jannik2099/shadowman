# Copyright (c) 2017 Michał Górny
# Distributed under the terms of the 2-clause BSD license

DESCRIPTION="Manage compiler shadow link directories (distcc, ccache)"
MAINTAINER="mgorny@gentoo.org"
VERSION=0

# {{{ tool data
MASQ_TOOLS=( ccache distcc icecc )

MASQ_DIR_ccache=${EPREFIX}/usr/lib/ccache/bin
# TODO: account for get_libdir
MASQ_DIR_distcc=${EPREFIX}/usr/lib64/distcc/bin
MASQ_DIR_icecc=${EPREFIX}/usr/libexec/icecc/bin

MASQ_COMPILER_DIR=${EPREFIX}/usr/bin
MASQ_COMPILER_WILDCARDS=(
	# includes:
	# - basic symlinks: cc, c++, c99
	# - gcc: gcc, g++
	# - clang: clang, clang++
	# any PREFIX- is allowed (to account for CHOST)
	# version-like -SUFFIX is allowed
	{,'*-'}{cc,c++,c99,g{cc,++},clang{,++}}{,'-[0-9]*'}
)
# }}}

# {{{ helper functions
# print list of tools that are found installed on the system
# (via PATH lookup)
get_installed_tools() {
	local t
	for t in "${MASQ_TOOLS[@]}"; do
		type -P "${t}" &>/dev/null &&
			echo "${t}"
	done
}
# }}}

## {{{ update masquerade
describe_update() {
	echo "Update the shadow link directory"
}

describe_update_parameters() {
	echo "[<tool>|all [<wildcard>]]"
}

describe_update_options() {
	echo "<tool>     : Tool(s) to update or 'all' (the default) to update all (${MASQ_TOOLS[*]})"
	echo "<wildcard> : Link all executables matching the wildcard (as found in PATH), otherwise default list"
}

do_update() {
	local tools=( ${1:-all} )
	local wildcards=( "${2}" )

	shopt -s nullglob

	[[ ${tools} == all ]] && tools=( $(get_installed_tools) )
	[[ ${wildcards} ]] || wildcards=( "${MASQ_COMPILER_WILDCARDS[@]}" )
	local t
	for t in "${tools[@]}"; do
		has "${t}" "${MASQ_TOOLS[@]}" || die -q "Unknown tool: ${t}"
		echo "Updating masquerade for ${t} ..."

		local out_dir_var=MASQ_DIR_${t}
		local out_dir=${!out_dir_var}
		local tool_exec=$(type -P "${t}")
		[[ ${tool_exec} ]] || die -q "Tool not found in PATH: ${t}"

		mkdir -p "${out_dir}" || die
		cd "${out_dir}" || die
		local p
		for p in "${wildcards[@]}"; do
			# remove existing links matching the wildcard
			rm -f ${p} || die

			# create new links
			local exe
			while read -r exe; do
				ln -v -s "${tool_exec}" "${exe}" || die
			done < <(compgen -c -X "!${p}" | sort -u)
			# note: compgen can return a command twice if it is included
			# in multiple directories in PATH
		done
	done
}
## }}}

## {{{ clean stale symlinks
describe_clean() {
	echo "Clean stale symlinks from the shadow directory"
}

describe_clean_parameters() {
	echo "[<tool>|all]"
}

describe_clean_options() {
	echo "<tool>     : Tool(s) to clean or 'all' (the default) to update all (${MASQ_TOOLS[*]})"
}

do_clean() {
	local tools=( ${1:-all} )

	shopt -s nullglob

	[[ ${tools} == all ]] && tools=( $(get_installed_tools) )
	local t
	for t in "${tools[@]}"; do
		has "${t}" "${MASQ_TOOLS[@]}" || die -q "Unknown tool: ${t}"
		echo "Cleaning up masquerade for ${t} ..."

		local out_dir_var=MASQ_DIR_${t}
		local out_dir=${!out_dir_var}

		[[ -d ${out_dir} ]] || continue
		cd "${out_dir}" || die
		local p
		for p in *; do
			if ! type -P "${p}" &>/dev/null; then
				rm -v "${p}"
			fi
		done
	done
}
## }}}

## {{{ remove masquerade dir
describe_remove() {
	echo "Remove the shadow directory completely"
}

describe_remove_parameters() {
	echo "<tool>"
}

describe_remove_options() {
	echo "<tool>     : Tool(s) to remove or (${MASQ_TOOLS[*]})"
}

do_remove() {
	[[ ${1} ]] || die -q "No tool specified for removal"
	local tools=( ${1} )

	shopt -s nullglob

	[[ ${tools} == all ]] && die -q "Implicitly removing all tools is not allowed"
	local t
	for t in "${tools[@]}"; do
		has "${t}" "${MASQ_TOOLS[@]}" || die -q "Unknown tool: ${t}"
		echo "Removing masquerade for ${t} ..."

		local out_dir_var=MASQ_DIR_${t}
		local out_dir=${!out_dir_var}

		rm -v -r -f "${out_dir}" || die
	done
}
## }}}

# vim: ts=4 sw=4 noet fdm=marker
